vcl 4.0;

# vcl_recv is called whenever a request is received
sub vcl_recv {
    set req.http.X-Forwarded-For = client.ip;

    # Since we expose varnish on the default port (6081) we need to rewrite
    # requests that are generated using the default wiki port (8080)
    # This needs to be done early because it's needed for PURGE calls
    if (req.url ~ ":<%= scope[':forwarded_port'] %>") {
        set req.url = regsub(req.url, "(.*):<%= scope[':forwarded_port'] %>/(.*)", "\1:6081/\2");
    }

    # This uses the ACL action called "purge". Basically if a request to
    # PURGE the cache comes from anywhere other than localhost, ignore it.
    if (req.method == "PURGE") {
        if (!client.ip ~ purge) {
            return(synth(405, "This IP is not allowed to send PURGE requests."));
        }
        return(hash);
    }

    # Pass any requests that Varnish does not understand straight to the backend.
    if (req.method != "GET" && req.method != "HEAD" &&
        req.method != "PUT" && req.method != "POST" &&
        req.method != "TRACE" && req.method != "OPTIONS" &&
        req.method != "DELETE") {
        return (synth(405, "Method not allowed"));
    }

    # Pass anything other than GET and HEAD directly.
    if (req.method != "GET" && req.method != "HEAD") {
        return(pass);
    }

    # Pretend that image requests don't have cookie/auth, so that they get cached
    if (req.url ~ "^/images/" || req.http.X-Url ~ "^/images/") {
        unset req.http.Authorization;
        unset req.http.Cookie;
    }

    # Pass requests from logged-in users directly.
    if (req.http.Authorization || req.http.Cookie ~ "wikiUserID=") {
        return(pass);
    }

    # Pass any requests with the "If-None-Match" header directly.
    if (req.http.If-None-Match) {
        return(pass);
    }

    # Pass requests to potential non-plain reads on articles (eg. action=edit)
    if (req.url ~ "^/w/index\.php" || req.url ~ "^/\?title=") {
        return(pass);
    }

    # normalize Accept-Encoding to reduce vary
    if (req.http.Accept-Encoding) {
      if (req.http.User-Agent ~ "MSIE 6") {
        unset req.http.Accept-Encoding;
      } elsif (req.http.Accept-Encoding ~ "gzip") {
        set req.http.Accept-Encoding = "gzip";
      } elsif (req.http.Accept-Encoding ~ "deflate") {
        set req.http.Accept-Encoding = "deflate";
      } else {
        unset req.http.Accept-Encoding;
      }
    }

    return(hash);
}

sub vcl_pipe {
    # Note that only the first request to the backend will have
    # X-Forwarded-For set.  If you use X-Forwarded-For and want to
    # have it set for all requests, make sure to have:
    # set req.http.connection = "close";

    # This is otherwise not necessary if you do not do any request rewriting.

    set req.http.connection = "close";
}

# Called if the cache has a copy of the page.
sub vcl_hit {
    if (req.method == "PURGE") {
        ban("req.url == " + req.url);
        return(synth(200, "Purged"));
    }

    if (!obj.ttl > 0s) {
        return(pass);
    }
}

# Called if the cache does not have a copy of the page.
sub vcl_miss {
    if (req.method == "PURGE") {
        return(synth(200, "Not in cache"));
    }
}

sub vcl_deliver {
    if (obj.hits > 0) {
        set resp.http.X-Cache = "hit (" + obj.hits + ")";
    } else {
        set resp.http.X-Cache = "miss (0)";
    }

    # Enforce Age: 0 for ResourceLoader
    if (req.url ~ "^/w/load\.php" ) {
        set resp.http.Age = 0;
    }

    # Provide custom error html if error response has no body
    if (resp.http.Content-Length == "0" && resp.status >= 400) {
        # Varnish doesn't define status codes from RFC6585
        if (resp.status == 428) {
            return(synth(resp.status, "Precondition Required"));
        } elseif (resp.status == 429) {
            return(synth(resp.status, "Too Many Requests"));
        } elseif (resp.status == 431) {
            return(synth(resp.status, "Request Header Fields Too Large"));
        } elseif (resp.status == 511) {
            return(synth(resp.status, "Network Authentication Required"));
        }
        return(synth(resp.status));
    }
}

# Called after a document has been successfully retrieved from the backend.
sub vcl_backend_response {
    set beresp.grace = 120s;

    if (beresp.ttl < 48h) {
        set beresp.ttl = 48h;
    }

    if (!beresp.ttl > 0s || beresp.http.Set-Cookie || (bereq.http.Authorization && !beresp.http.Cache-Control ~ "public") || beresp.status >= 400) {
        set beresp.uncacheable = true;
        set beresp.ttl = 120s;
    }
}

sub vcl_backend_error {
    call backend_error_errorpage;
    return (deliver);
}

sub vcl_synth {
    if (req.method != "PURGE") {
        if (resp.status >= 400) {
            call synth_errorpage;
        }
    }
    return (deliver);
}
