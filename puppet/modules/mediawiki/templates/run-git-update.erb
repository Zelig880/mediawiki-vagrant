#!/usr/bin/env bash
# Update local git repositories
# Command run in VM by `vagrant git-update`

source /etc/profile.d/set_MW_INSTALL_PATH.sh

set -o nounset
declare -a UPDATE_ERRORS

# Set default values for configuration variables
: ${SHARE_OWNER=<%= scope['::share_owner'] %>}
: ${SHARE_GROUP=<%= scope['::share_group'] %>}
: ${NPM_CONFIG_CACHE=<%= scope['::npm::cache_dir'] %>}
: ${SERVICE_CONF_DIR=<%= scope['::service::conf_dir'] %>}

export SHARE_OWNER SHARE_GROUP NPM_CONFIG_CACHE SERVICE_CONF_DIR
UPDATE_ERRORS=( )

function mwv_service_update {
  local ERR=''
  local PULL_RESULT=0
  local CONF_FILE=$1
  local FORCE_UPDATE=${2:-}
  source "${CONF_FILE}"
  echo -e "\e[36m==> Updating ${SERVICE_NAME} ...\e[0m"
  if [[ -n $NEED_CHDIR && -d $SERVICE_DIR ]]; then
    if [[ -n $DO_PULL ]]; then
      mwv_git_pull "$SERVICE_DIR" inline
      PULL_RESULT=$?
    fi
    if [[ ${PULL_RESULT} -eq 2 ]]; then
      # git pull failed, bail out
      return 1
    fi
    [[ "-f" == ${FORCE_UPDATE} || "--force" == ${FORCE_UPDATE} ]] && PULL_RESULT=1
    cd $SERVICE_DIR
    if [[ -n "${UPDATE_CMD}" && ${PULL_RESULT} -eq 1 ]]; then
      echo "[*] Updating dependencies for ${SERVICE_NAME} ..."
      [[ -n ${DO_RESTART} ]] && sudo service ${RESTART_NAME} stop
      [[ -f package.json ]] && rm -rf node_modules > /dev/null
      if ! /bin/sh -c "$UPDATE_CMD"; then
        ERR="Could not update dependencies of ${SERVICE_NAME} !"
        echo -e "\e[1;31m ***** ${ERR}\e[0m"
        UPDATE_ERRORS+=("${ERR}")
      fi
    fi
  fi
  if [[ -n $DO_RESTART && -z $ERR ]]; then
    echo "[*] Restarting service ${RESTART_NAME} ..."
    sudo service ${RESTART_NAME} restart
  fi
  echo
}
export -f mwv_service_update

function mwv_git_pull {
  local OUTPUT_INLINE=${2:-}
  local RETVAL=0
  cd "$1"
  if [[ -z $OUTPUT_INLINE ]]; then
    echo -e "\e[36m==> Updating $(pwd) ...\e[0m"
  else
    echo "[*] Updating repo in $(pwd) ..."
  fi

  # Some srv dirs may be still under root, chown them
  find . -uid 0 -exec sudo chown -R ${SHARE_OWNER}:${SHARE_GROUP} {} \+

  local BRANCH=$(expr $(git symbolic-ref HEAD) : 'refs/heads/\(.*\)')
  if [[ -z $BRANCH ]]; then
    git checkout master
    BRANCH=$(expr $(git symbolic-ref HEAD) : 'refs/heads/\(.*\)')
  fi

  local ERR=''
  local PULL_CMD='git pull --rebase'
  if [[ -n $BRANCH ]]; then
    local REMOTE=$(git config branch.${BRANCH}.remote)
    if [[ -n $REMOTE ]]; then
      local URL=$(git config --get remote.${REMOTE}.url)
      if [[ $URL == ssh://* ]]; then
        # Convert remote git url from ssh:// to anonymous https://
        URL=$(echo $URL | sed -e 's!ssh://[^@]\+@!https://!g' -e 's!:29418!/r!g')
        PULL_CMD="${PULL_CMD} ${URL}"
      fi
      # fetch the updates, but don't apply them just yet
      git fetch ${REMOTE}
      if git diff --name-only ${REMOTE}/${BRANCH} | grep -E 'package.json|requirements.txt|composer.json' >/dev/null; then
        # some dependencies have changed, we need to signal it
        RETVAL=1
      fi
      # update the repo
      ${PULL_CMD}
      if [[ $? -ne 0 ]]; then
        # If we didn't successfully update (possibly because we're on
        # a local branch), leave the submodules alone.
        ERR="GIT PULL failed in $(pwd) for branch '${BRANCH}'"
      else
        git submodule update --init --recursive
        if [[ $? -ne 0 ]]; then
          ERR="GIT SUBMODULE UPDATE failed in $(pwd) for branch '${BRANCH}'"
        fi
      fi
    else
      ERR="Remote not found in $(pwd) for branch '${BRANCH}'"
    fi
  else
    ERR="Unable to get current branch in $(pwd)"
  fi

  if [[ -n $ERR ]]; then
    echo -e "\e[1;31m ***** ${ERR}\e[0m"
    UPDATE_ERRORS+=("$ERR")
    RETVAL=2
  fi

  [[ -z $OUTPUT_INLINE ]] && echo
  return ${RETVAL}
}
export -f mwv_git_pull

function mwv_composer {
  cd "$1"
  if git ls-files --error-unmatch composer.lock >/dev/null 2>&1; then
      # composer.lock is git-versioned, so rely on it
      COMPOSER_CMD=install
      COMPOSER_ACTION=Installing
  else
      COMPOSER_CMD=update
      COMPOSER_ACTION=Updating
  fi

  echo -e "\e[36m==> $COMPOSER_ACTION composer dependencies in $(pwd) ...\e[0m"
  /usr/local/bin/composer $COMPOSER_CMD --no-interaction --optimize-autoloader
  echo
}
export -f mwv_composer

# Expose the needed npm env vars
export NPM_CONFIG_CACHE
export NPM_CONFIG_GLOBAL=false
export LINK=g++
export HOME=/home/vagrant

# Clear the npm module cache as earlier cached versions
# of larger modules cause npm to run out of memory
sudo rm -rf ${NPM_CONFIG_CACHE}/* /home/vagrant/.npm

# Update services
for SRVCONF in ${SERVICE_CONF_DIR}/*.conf; do
    mwv_service_update $SRVCONF "$@"
done

# Update git checkouts in parallel
for DIR in $MW_INSTALL_PATH \
    ${MW_INSTALL_PATH}/extensions/* \
    ${MW_INSTALL_PATH}/skins/*; do
  if [[ -d $DIR ]] && [[ -d ${DIR}/.git ]]; then
    echo $DIR
  fi
done |
parallel --verbose --noswap --load "100%" --keep-order mwv_git_pull

# Update composer dependencies in parallel
for DIR in $MW_INSTALL_PATH \
    ${MW_INSTALL_PATH}/extensions/*; do
  if [[ -d $DIR ]] && [[ -f ${DIR}/composer.json ]]; then
    echo $DIR
  fi
done |
parallel --verbose --noswap --load "100%" --memfree 200M --retries 1 --keep-order mwv_composer

echo -e "\e[36m==> Updating database ...\e[0m"
/usr/local/bin/foreachwiki update.php --quick --doshared

if [[ ${#UPDATE_ERRORS[@]} -ne 0 ]]; then
  echo
  echo -e "\e[1;31m ************* Errors ***********\e[0m"
  printf -- '* %s\n' "${UPDATE_ERRORS[@]}"
fi
# vim:sw=2:ts=2:sts=2:et:ft=sh:
