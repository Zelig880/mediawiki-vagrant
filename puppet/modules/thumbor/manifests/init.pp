# == Class: Thumbor
#
# This Puppet class installs and configures a Thumbor instance
#
# Thumbor is installed as a Python package, and as part of that,
# pip compiles lxml.
#
# === Parameters
#
# [*deploy_dir*]
#   Path where Thumbor should be installed (example: '/var/thumbor').
#
# [*cfg_dir*]
#   Thumbor configuration directory. The directory will be generated by Puppet.
#
# [*log_dir*]
#   Thumbor log directory. The directory will be generated by Puppet.
#
# [*statsd_port*]
#   Port the statsd instance runs on.
#
# [*sentry_dsn_file*]
#   Path to file containing the sentry dsn file.
#
class thumbor (
    $deploy_dir,
    $cfg_dir,
    $log_dir,
    $statsd_port,
    $sentry_dsn_file,
) {
    require ::virtualenv
    # Needed by the venv, which clones a few git repos
    require ::git

    # jpegtran
    require_package('libjpeg-progs')

    # exiftool is needed by exif-optimizer
    require_package('libimage-exiftool-perl')

    # For Pillow
    require_package('libjpeg-dev')

    # For GIF engine
    require_package('gifsicle')

    # For Video engine
    require_package('ffmpeg')

    # For XCF engine
    require_package('xcftools')

    # For DjVu engine
    require_package('libdjvulibre-dev')
    require_package('cython')

    # For Ghostscript engine (PDF)
    require_package('ghostscript')

    # For pycurl, a dependency of thumbor
    require_package('libcurl4-gnutls-dev')

    # For Mediawiki's IM/RSVG SVG support
    require_package('librsvg2-bin')

    # For Mediawiki's DJVU support
    require_package('djvulibre-bin')
    require_package('netpbm')

    # For lxml, a dependency of thumbor-plugins
    require_package('libxml2-dev', 'libxslt1-dev')

    require_package('firejail')

    $statsd_host = 'localhost'
    $statsd_prefix = 'Thumbor'

    group { 'thumbor':
        ensure => present,
    }

    user { 'thumbor':
        ensure  => present,
        home    => '/var/run/thumbor',
        gid     => 'thumbor',
        require => Group['thumbor'],
    }

    file { '/etc/firejail/thumbor.profile':
        ensure => present,
        owner  => 'root',
        group  => 'root',
        mode   => '0444',
        source => 'puppet:///modules/thumbor/thumbor.profile',
    }

    virtualenv::environment { $deploy_dir:
        ensure   => present,
        packages => [
            'pgi',
            'raven',
            'python-swiftclient',
            'pympler',
            'git+git://github.com/gi11es/thumbor.git',
            'git+git://github.com/thumbor-community/core',
            'git+https://phabricator.wikimedia.org/diffusion/THMBREXT/thumbor-plugins.git',
        ],
        require  => Package[
            'libjpeg-progs',
            # Needs to be an explicit dependency, for the packages pointing to git repos
            'git',
            'libcurl4-gnutls-dev',
            'libxml2-dev',
            'libxslt1-dev',
            'libjpeg-dev',
            'libdjvulibre-dev',
            'cython',
            'firejail'
        ],
        timeout  => 600, # This venv can be particularly long to download and setup
    }

    file { "${deploy_dir}/tinyrgb.icc":
        ensure => present,
        source => 'puppet:///modules/thumbor/tinyrgb.icc',
    }

    file { $cfg_dir:
        ensure => directory,
    }

    file { $log_dir:
        ensure => directory,
    }

    file { "${cfg_dir}/10-thumbor.conf":
        ensure    => present,
        group     => 'thumbor',
        content   => template('thumbor/10-thumbor.conf.erb'),
        mode      => '0640',
        subscribe => File[$sentry_dsn_file],
        require   => [
            File[$cfg_dir],
            Group['thumbor'],
        ],
    }

    file { "${cfg_dir}/20-thumbor-logging.conf":
        ensure  => present,
        group   => 'thumbor',
        content => template('thumbor/20-thumbor-logging.conf.erb'),
        mode    => '0640',
        require => [
            File[$cfg_dir, $log_dir],
            Group['thumbor'],
        ],
    }

    file { "${cfg_dir}/20-thumbor-wikimedia.conf":
        ensure  => present,
        group   => 'thumbor',
        content => template('thumbor/20-thumbor-wikimedia.conf.erb'),
        mode    => '0640',
        require => [
            File[$cfg_dir],
            Group['thumbor'],
        ],
    }

    cgroup::config { 'thumbor':
        limits  => "perm { task { uid = thumbor; gid = thumbor; } admin { uid = thumbor; gid = thumbor; } } memory { memory.limit_in_bytes = \"1048576000\"; }", # 1GB
        cgrules => '@thumbor memory thumbor',
    }

    # This will generate a list of ports starting at 8889, with
    # as many ports as there are CPUs on the machine.
    $ports = sequence_array(8889, inline_template('<%= `nproc` %>'))

    thumbor::service { $ports:
        deploy_dir => $deploy_dir,
        cfg_files  => File[
            "${cfg_dir}/10-thumbor.conf",
            "${cfg_dir}/20-thumbor-logging.conf",
            "${cfg_dir}/20-thumbor-wikimedia.conf"
        ],
    }

    varnish::backend { 'swift':
        host   => '127.0.0.1',
        port   => $::swift::port,
        onlyif => 'req.url ~ "^/images/.*"',
    }

    varnish::config { 'thumbor':
        content => template('thumbor/varnish.vcl.erb'),
        order   => 49, # Needs to be before default for vcl_recv override
    }

    $port = $::swift::port
    $project = $::swift::project
    $user = $::swift::user
    $key = $::swift::key

    # Since thumbor doesn't have the ability to create swift containers, we have to
    # create the sharded thumbnail containers ahead of time.
    exec { 'create-swift-thumbnail-containers':
        command   => '/usr/local/bin/mwscript extensions/WikimediaMaintenance/filebackend/setZoneAccess.php --wiki wiki --backend swift-backend',
        unless    => "swift -A http://127.0.0.1:${port}/auth/v1.0 -U ${project}:${user} -K ${key} stat wiki-en-local-public.00 | grep -q wiki-en-local-public.00",
        require   => [
            Service[
                'swift-account-server',
                'swift-account-auditor',
                'swift-account-reaper',
                'swift-account-replicator',
                'swift-container-server',
                'swift-container-updater',
                'swift-container-replicator',
                'swift-container-sync',
                'swift-container-auditor',
                'swift-object-server',
                'swift-object-auditor',
                'swift-object-replicator',
                'swift-object-updater',
                'swift-proxy-server'
            ],
            Mediawiki::Settings['swift'],
        ],
        subscribe => Mediawiki::Settings['swift'],
    }
}
