vcl 4.0;
import xkey;
import std;

sub vcl_recv {
    set req.http.X-Forwarded-For = client.ip;

    # Since we expose varnish on the default port (6081) we need to rewrite
    # requests that are generated using the default wiki port (8080)
    # This needs to be done early because it's needed for PURGE calls
    if (req.url ~ ":8080") {
        set req.url = regsub(req.url, "(.*):8080/(.*)", "\1:6081/\2");
    }

    # Swift expects /lang/project/foo
    if (req.url ~ "^/images/") {
        set req.url = "/wiki/dev/" + regsub(req.url, "^/images/(.*)", "\1");
    }

    # This uses the ACL action called "purge". Basically if a request to
    # PURGE the cache comes from anywhere other than localhost, ignore it.
    if (req.method == "PURGE") {
        if (!client.ip ~ purge) {
            return (synth(405, "This IP is not allowed to send PURGE requests."));
        }

        return(hash);
    }

    # Reject any methods that aren't expected to work in the context of thumbnails
    if (req.method != "GET" && req.method != "HEAD") {
        return (synth(405, "Method not allowed"));
    }

    return(hash);
}

sub vcl_deliver {
    if (obj.hits > 0) {
        set resp.http.X-Cache = "hit (" + obj.hits + ")";
    } else {
        set resp.http.X-Cache = "miss (0)";
    }

    # Enforce Age: 0 for ResourceLoader
    if (req.url ~ "^/w/load\.php" ) {
        set resp.http.Age = 0;
    }

    if (resp.status == 400) {
        return(synth(400, "Bad Request"));
    }

    if (resp.status == 404) {
        return(synth(404, "Not Found"));
    }

    if (resp.status == 429) {
        return(synth(429, "Too Many Requests"));
    }

    if (resp.status == 500) {
        return(synth(500, "Internal Server Error"));
    }

    if (resp.status == 502) {
        return(synth(502, "Bad Gateway"));
    }
}

sub vcl_backend_response {
    set beresp.http.Access-Control-Allow-Origin = "*";
}