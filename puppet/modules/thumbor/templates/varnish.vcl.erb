vcl 4.0;
import xkey;
import std;

sub vcl_recv {
    set req.http.X-Forwarded-For = client.ip;

    # Since we expose varnish on the default port (6081) we need to rewrite
    # requests that are generated using the default wiki port (8080)
    # This needs to be done early because it's needed for PURGE calls
    if (req.url ~ ":8080") {
        set req.url = regsub(req.url, "(.*):8080/(.*)", "\1:6081/\2");
    }

    # Swift expects /lang/project/foo
    if (req.url ~ "^/images/") {
        set req.url = "/wiki/dev/" + regsub(req.url, "^/images/(.*)", "\1");

        // Strip away all query parameters
        set req.url = regsub(req.url, "\?.*$", "");

        // Replace double slashes
        set req.url = regsuball(req.url, "/{2,}", "/");

        if (req.url ~ "(?i)/thumb/") {
            // Whitelist allowed thumbnail filetypes
            if (req.url !~ "(?i)\.(jpg|jpeg|jpe|gif|png|webp)$") {
                return (synth(400, "Bad Request"));
            }

            // Normalize end of thumbnail URL (redundant filename)

            // http://127.0.0.1:6081/images/thumb/a/a2/Little_kitten_.jpg/330px-Little_kitten_.jpg
            // becomes http://127.0.0.1:6081/images/thumb/a/a2/Little_kitten_.jpg/330px-Little_kitten_.jpg.jpg

            // http://127.0.0.1:6081/images/thumb/a/a2/Little_kitten_.jpg/330px-foo.jpg
            // becomes http://127.0.0.1:6081/images/thumb/a/a2/Little_kitten_.jpg/330px-Little_kitten_.jpg.jpg

            // http://127.0.0.1:6081/images/thumb/a/a2/Little_kitten_.jpg/330px-foo.JPG
            // becomes http://127.0.0.1:6081/images/thumb/a/a2/Little_kitten_.jpg/330px-Little_kitten_.jpg.jpg

            // http://127.0.0.1:6081/images/thumb/a/ae/Wikiqoe-www.pdf/page1-93px-foo.pdf.jpg
            // becomes http://127.0.0.1:6081/images/thumb/a/ae/Wikiqoe-www.pdf/page1-93px-Wikiqoe-www.pdf.jpg

            // Lowercase last part of the URL, to avoid case variations on extension or thumbnail parameters
            set req.url = regsub(req.url, "^(.+/)[^/]+$", "\1") + std.tolower(regsub(req.url, "^.+/([^/]+)$", "\1"));

            // In the abbreviated case, where MediaWiki turns the end of the thumbnail URL into -thumbnail.ext
            // (see abbrvThreshold in FileRepo), there is no need to copy over the canonical filename
            // However, we filter out potentially abusive use of -thumbnail.ext on short filenames (<= 160 characters), where the
            // normalization is warranted.

            if (!req.url ~ "-thumbnail\.[a-z0-9.]+$" || !req.url ~ "[^/]{161,}/[^/]+$") {
                // Copy canonical filename from beginning of URL to thumbnail parameters at the end

                set req.url = regsub(req.url, "(?i)/([^/]+)/((?:qlow-)?(?:lossy-)?(?:lossless-)?(?:page\d+-)?(?:lang[0-9a-z-]+-)?\d+px-(?:(?:seek=|seek%3D)\d+-)?)[^/]+\.(\w+)$", "/\1/\2\1.\3");
            }
        }
    }

    # This uses the ACL action called "purge". Basically if a request to
    # PURGE the cache comes from anywhere other than localhost, ignore it.
    if (req.method == "PURGE") {
        if (!client.ip ~ purge) {
            return (synth(405, "This IP is not allowed to send PURGE requests."));
        }

        return(hash);
    }

    # Reject any methods that aren't expected to work in the context of thumbnails
    if (req.method != "GET" && req.method != "HEAD") {
        return (synth(405, "Method not allowed"));
    }

    return(hash);
}

sub vcl_deliver {
    # If the client supports WebP and the thumbnail is popular enough, attempt to serve a WebP thumbnail instead of JPG/PNG
    if (obj.hits > 5 && req.url ~ "(?i)\.(jpg|jpeg|jpe|png)$" && req.url ~ "(?i)/thumb/" && req.http.Accept ~ "(?i)image/webp" && req.restarts == 0) {
        # Revert image URL transformation to ensure this goes to the right varnish
        set req.url = "/images/" + regsub(req.url, "^/wiki/dev/(.*)", "\1");
        # Append .webp to the request URL
        set req.url = req.url + ".webp";
        return(restart);
    }

    # The WebP thumbnail failed, fall back to the JPG/PNG one
    if (resp.status >= 400 && req.restarts >= 1 && req.url ~ "(?i)\.webp$" && req.url ~ "(?i)/thumb/") {
        # Revert image URL transformation to ensure this goes to the right varnish
        set req.url = "/images/" + regsub(req.url, "^/wiki/dev/(.*)", "\1");
        # Remove .webp from the request URL
        set req.url = regsub(req.url, "(?i)\.webp$", "");
        return(restart);
    }
}

sub vcl_backend_response {
    set beresp.http.Access-Control-Allow-Origin = "*";
}