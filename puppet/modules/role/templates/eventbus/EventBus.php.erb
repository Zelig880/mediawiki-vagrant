# <?php

    // Each active event service backend is configured here.
    $wgEventServices = [
        // eventgate-main will block the HTTP POST until events are persisted.
        "eventgate-main"      => [ "url" => "<%= @eventgate_url %>" ],
        // eventgate-analytics will respond to HTTP POST request ASAP.
        "eventgate-analytics" => [ "url" => "<%= @eventgate_url %>?hasty=true" ],
    ];

    // Enable EventBus extension monolog handler via eventgate-analytics endpoint.
    $wgMWLoggerDefaultSpi['args'][0]['handlers']['eventgate-analytics'] = array(
        "class" => MediaWiki\Extension\EventBus\Adapters\Monolog\EventBusMonologHandler::class,
        "args" => array( "eventgate-analytics" ),
    );
    // Log api-requests via eventgate-analytics service.
    $wgMWLoggerDefaultSpi['args'][0]['loggers']['api-request'] = array(
        'handlers' => array( 'eventgate-analytics' ),
    );
    // Produce recentchange events using the EventBus extension to eventgate-main
    $wgRCFeeds = [
        'eventbus' => [
            'class'            => MediaWiki\Extension\EventBus\Adapters\RCFeed\EventBusRCFeedEngine::class,
            'formatter'        => MediaWiki\Extension\EventBus\Adapters\RCFeed\EventBusRCFeedFormatter::class,
            'eventServiceName' => 'eventgate-main',
        ]
    ];

    // Default EventBus event streams to send events to eventgate-main.
    // TODO: Refactor EventBus configuration: https://phabricator.wikimedia.org/T229863
    $wgEventServiceStreamConfig = [
        'default' => [
            'EventServiceName' => 'eventgate-main',
        ],
    ];
