lua_shared_dict prometheus_metrics 10M;
lua_package_path "/etc/nginx/prometheus.lua";

init_by_lua '
  prometheus = require("prometheus").init("prometheus_metrics")
  metric_requests = prometheus:counter(
    "nginx_http_requests_total", "Number of HTTP requests", {"host", "status"})
  metric_latency = prometheus:histogram(
    "nginx_http_request_duration_seconds", "HTTP request latency", {"host"})
  metric_connections = prometheus:gauge(
    "nginx_http_connections", "Number of HTTP connections", {"state"})
';

log_by_lua '
  local host = ngx.var.host:gsub("^www.", "")
  metric_requests:inc(1, {host, ngx.var.status})
  metric_latency:observe(ngx.now() - ngx.req.start_time(), {host})
';

upstream thumbor {
	least_conn;

	<% @ports.each do |port| %>
	server 127.0.0.1:<%= port %>;
	<% end %>
}

server {
	listen 8888;

	keepalive_timeout 60;

	location / {
		ssi on;
		proxy_redirect off;
		proxy_buffering off;
		proxy_set_header Host $http_host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header Request-Date $date_gmt;
		proxy_read_timeout 180s;
		proxy_pass http://thumbor;
		add_header X-Upstream $upstream_addr;
	}

	location /metrics {
		content_by_lua '
			metric_connections:set(ngx.var.connections_reading, {"reading"})
			metric_connections:set(ngx.var.connections_waiting, {"waiting"})
			metric_connections:set(ngx.var.connections_writing, {"writing"})
			prometheus:collect()
		';
	}
}
